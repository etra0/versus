{"version":3,"sources":["ResultsDialog.jsx","App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","ResultsDialog","open","values","handleOpen","rows","Object","keys","reduce","acc","d","push","name","score","expose","sort","a","b","console","log","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","color","onClick","aria-label","Typography","variant","className","Table","style","marginTop","TableHead","TableRow","TableCell","align","TableBody","map","row","key","component","scope","toFixed","bands","Set","data","band","Array","randInt","max","Math","floor","random","theme","createMuiTheme","palette","type","primary","blue","minimumVotes","randomChoice","songs","splice","length","App","useState","Rating","votes","setVotes","numVotes","setNumVotes","setOpen","fighters","setFighters","videoWidth","setVideoWidth","updateScore","winner","looser","winnerRate","looserRate","rate_1vs1","newWinnerRate","newLooserRate","newVotes","useEffect","windowWidth","window","innerWidth","v","ThemeProvider","Grid","container","item","xs","md","lg","Button","title","url","width","disabled","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAiBMA,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAASD,OAG9B,SAASI,EAAcJ,GAAQ,IACpCK,EAA6BL,EAA7BK,KAAMC,EAAuBN,EAAvBM,OAAQC,EAAeP,EAAfO,WAChBC,EAAOC,OAAOC,KAAKJ,GAAQK,QAAO,SAACC,EAAKC,GAE5C,OADAD,EAAIE,KAAK,CAAEC,KAAMF,EAAGG,MAAOC,YAAOX,EAAOO,MAClCD,IACN,IAAIM,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEJ,MAAQG,EAAEH,SAGlC,OAFAK,QAAQC,IAAId,GAGV,kBAACe,EAAA,EAAD,CACEC,YAAU,EACVnB,KAAMA,EACNoB,QAAS,kBAAMlB,GAAW,IAC1BmB,oBAAqB7B,GAErB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAMzB,GAAW,IAC1B0B,aAAW,SAEX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAGJ,yBAAKC,UAAU,iBACf,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,UAAW,QAASN,aAAW,gBAC5C,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,YAGJ,kBAACC,EAAA,EAAD,KACGpC,EAAKqC,KAAI,SAAAC,GAAG,OACX,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAI/B,MACjB,kBAAC2B,EAAA,EAAD,CAAWM,UAAU,KAAKC,MAAM,OAC7BH,EAAI/B,MAEP,kBAAC2B,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAI9B,MAAMkC,QAAQ,Y,oQCpD1D,IAAMC,EAAQ,IAAIC,IAAIC,EAAK1C,QAAO,SAACC,EAAKC,GAAyB,OAAlBD,EAAIE,KAAKD,EAAEyC,MAAc1C,IAAM,IAAI2C,QAC5EC,EAAU,SAACC,GACf,OAAOC,KAAKC,MAAMD,KAAKE,SAASH,IAE5BI,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAASC,OAIPC,EAAe,GAGfC,EAAe,WACnB,IAAIjD,EAAGC,EACP,EAAG,CACD,IAAMiD,EAAK,YAAOhB,GAClBlC,EAAIkD,EAAMC,OAAOd,EAAQa,EAAME,QAAS,GAAG,GAC3CnD,EAAIiD,EAAMC,OAAOd,EAAQa,EAAME,QAAS,GAAG,SACpCpD,EAAEmC,OAASlC,EAAEkC,MACtB,MAAO,CAACnC,EAAGC,IAsEEoD,MAjEf,WAAgB,IAAD,EACaC,mBACxB,YAAItB,GAAOxC,QAAO,SAACC,EAAKC,GAA8B,OAAvBD,EAAIC,GAAK,IAAI6D,IAAiB9D,IAAM,KAFxD,mBACN+D,EADM,KACCC,EADD,OAGmBH,mBAAS,GAH5B,mBAGNI,EAHM,KAGIC,EAHJ,OAMWL,oBAAS,GANpB,mBAMNpE,EANM,KAMA0E,EANA,OASmBN,mBAASL,KAT5B,mBASNY,EATM,KASIC,EATJ,OAWuBR,mBAAS,KAXhC,mBAWNS,EAXM,KAWMC,EAXN,KAaPC,EAAc,SAACC,EAAQC,GAC3B,IAAMC,EAAaZ,EAAMU,EAAO/B,MAC1BkC,EAAab,EAAMW,EAAOhC,MAFM,EAICmC,YAAUF,EAAYC,GAJvB,mBAI/BE,EAJ+B,KAIhBC,EAJgB,KAKhCC,EAAW,GACjBA,EAASP,EAAO/B,MAAQoC,EACxBE,EAASN,EAAOhC,MAAQqC,EAGxBf,E,yWAAS,CAAD,GAAKD,EAAL,GAAeiB,IACvBd,EAAYD,EAAW,GACvBI,EAAYb,MAIdyB,qBAAU,WAAO,IACKC,EAAgBC,OAA5BC,WACJF,EAAcZ,GAChBC,EAAcW,EAA0B,IAAZA,KAC7B,IAGH,IAAIG,EAAC,YAAOxF,OAAOC,KAAKiE,IAGxB,OAFAtD,QAAQC,IAAI2E,EAAE/E,MAAK,SAACC,EAAGC,GAAJ,OAAUH,YAAO0D,EAAMvD,IAAMH,YAAO0D,EAAMxD,QAC7DE,QAAQC,IAAIqD,GAEV,kBAACuB,EAAA,EAAD,CAAerC,MAAOA,GACtB,kBAACsC,EAAA,EAAD,CAAMC,WAAS,EAAChE,UAAU,OACxB,kBAAC+D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGpE,UAAU,WAC1C,kBAACqE,EAAA,EAAD,CAAQtE,QAAQ,WAAWJ,MAAM,UAAUC,QAAS,kBAAMoD,EAAYJ,EAAS,GAAIA,EAAS,MAAMA,EAAS,GAAG0B,OAC9G,kBAAC,IAAD,CAAaC,IAAK3B,EAAS,GAAG2B,IAAKC,MAAO1B,EAAa,QAEzD,kBAACiB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGpE,UAAU,WAC1C,kBAACqE,EAAA,EAAD,CAAQtE,QAAQ,WAAWJ,MAAM,UAAUC,QAAS,kBAAMoD,EAAYJ,EAAS,GAAIA,EAAS,MAAMA,EAAS,GAAG0B,OAC9G,kBAAC,IAAD,CAAaC,IAAK3B,EAAS,GAAG2B,IAAKC,MAAO1B,EAAa,QAEzD,kBAACuB,EAAA,EAAD,CACEtE,QAAQ,WACRJ,MAAM,UACNO,MAAO,CAACC,UAAW,IACnBP,QAAS,kBAAM+C,GAAQ,IACvB8B,WAAYhC,GAAYV,IAErBU,GAAYV,EAAe,iBAA3B,iBAAwDA,EAAeU,EAAvE,WAEL,kBAACzE,EAAD,CAAeC,KAAMA,EAAME,WAAYwE,EAASzE,OAAQqE,OCpF1CmC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.684206fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Rating, rate_1vs1, expose } from 'ts-trueskill';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function ResultsDialog(props) {\n  const { open, values, handleOpen } = props;\n  const rows = Object.keys(values).reduce((acc, d) => {\n    acc.push({ name: d, score: expose(values[d]) });\n    return acc;\n  }, []).sort((a, b) => b.score - a.score);\n  console.log(rows)\n\n  return (\n    <Dialog\n      fullScreen\n      open={open}\n      onClose={() => handleOpen(false)}\n      TransitionComponent={Transition}\n    >\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => handleOpen(false)}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Resultados</Typography>\n        </Toolbar>\n      </AppBar>\n      <div className='results-table'>\n      <Table style={{marginTop: '30px'}} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Banda</TableCell>\n            <TableCell align=\"right\">Puntos</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.score.toFixed(0)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      </div>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport data from './data.json'\nimport { Rating, rate_1vs1, expose } from 'ts-trueskill';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ReactPlayer from 'react-player'\nimport ResultsDialog from './ResultsDialog';\nimport { createMuiTheme, ThemeProvider} from '@material-ui/core';\nimport blue from '@material-ui/core/colors/blue';\n\nconst bands = new Set(data.reduce((acc, d) => {acc.push(d.band); return acc}, new Array()));\nconst randInt = (max) => {\n  return Math.floor(Math.random()*max);\n}\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: blue\n  }\n});\n\nconst minimumVotes = 25\n\n\nconst randomChoice = () => {\n  let a, b;\n  do {\n    const songs = [...data];\n    a = songs.splice(randInt(songs.length), 1)[0];\n    b = songs.splice(randInt(songs.length), 1)[0];\n  } while (a.band === b.band);\n  return [a, b];\n}\n\n\n\nfunction App() {\n  const [votes, setVotes] = useState(\n    [...bands].reduce((acc, d) => {acc[d] = new Rating(); return acc}, {}))\n  const [numVotes, setNumVotes] = useState(0);\n\n  // modal of results\n  const [open, setOpen] = useState(false);\n\n  // Two groups choosed to fight\n  const [fighters, setFighters] = useState(randomChoice());\n  \n  const [videoWidth, setVideoWidth] = useState(675);\n\n  const updateScore = (winner, looser) => {\n    const winnerRate = votes[winner.band];\n    const looserRate = votes[looser.band];\n\n    const [newWinnerRate, newLooserRate] = rate_1vs1(winnerRate, looserRate);\n    const newVotes = {}\n    newVotes[winner.band] = newWinnerRate;\n    newVotes[looser.band] = newLooserRate;\n\n\n    setVotes({...votes, ...newVotes});\n    setNumVotes(numVotes + 1);\n    setFighters(randomChoice());\n  }\n\n\n  useEffect(() => {\n    const { innerWidth: windowWidth } = window;\n    if (windowWidth < videoWidth)\n      setVideoWidth(windowWidth - windowWidth*.05);\n  }, [])\n\n\n  let v = [...Object.keys(votes)]\n  console.log(v.sort((a, b) => expose(votes[b]) - expose(votes[a])))\n  console.log(votes)\n  return (\n    <ThemeProvider theme={theme}>\n    <Grid container className=\"App\">\n      <Grid item xs={12} md={12} lg={6} className='fighter'>\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => updateScore(fighters[0], fighters[1])}>{fighters[0].title}</Button>\n        <ReactPlayer url={fighters[0].url} width={videoWidth + 'px'}/>\n      </Grid>\n      <Grid item xs={12} md={12} lg={6} className='fighter'>\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => updateScore(fighters[1], fighters[0])}>{fighters[1].title}</Button>\n        <ReactPlayer url={fighters[1].url} width={videoWidth + 'px'}/>\n      </Grid>\n      <Button \n        variant='outlined' \n        color='primary' \n        style={{marginTop: 20}}\n        onClick={() => setOpen(true)}\n        disabled={!(numVotes >= minimumVotes)}\n        >\n          {numVotes >= minimumVotes ? 'Ver Resultados' : `Faltan ${minimumVotes - numVotes} votos`}\n      </Button>\n      <ResultsDialog open={open} handleOpen={setOpen} values={votes}/>\n    </Grid>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}